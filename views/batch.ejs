<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mass Message - FHY WaBotUI</title>
    <meta name="description" content="FHY WaBotUI permite envio de mensagens em massa para vários destinatários com facilidade." />
    <meta name="keywords" content="WhatsApp bot, mensagens em massa, gerenciamento de mensagens, WhatsApp API" />
    <link rel="icon" type="image/png" href="/ss1.png" sizes="32x32" />
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .accordion-content {
            transition: max-height 0.3s ease, opacity 0.3s ease;
            max-height: 0;
            opacity: 0;
            overflow: hidden;
        }
        .accordion-content.show {
            max-height: 100vh;
            opacity: 1;
        }
    </style>
</head>
<body class="bg-gray-700 text-white">
    <header class="w-full flex justify-between px-4 py-3 bg-gray-700">
        <a href="/dashboard" class="flex">
            <img src="/ss.png" class="h-9 w-auto" alt="FHY WaBotUI">
            <span class="text-xs font-bold text-gray-300">v1.7</span>
        </a>
        <div class="gap-2 items-center flex">
            <a href="/dashboard" class="relative bg-gray-900 hover:bg-gray-800 text-white p-2 rounded group">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 15 3 9m0 0 6-6M3 9h12a6 6 0 0 1 0 12h-3" />
                </svg>
                <span class="absolute -ml-6 left-1/2 transform -translate-x-1/2 translate-y-2 bg-gray-900 text-white text-xs rounded px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap">
                    Back Dashboard
                </span>
            </a>
        </div>
    </header>
    
    <div class="bg-gray-900 p-4 rounded">
        <h2 class="text-xl font-bold mb-4">Mass Message</h2>
    
        <div class="flex flex-col gap-1 mb-4">
            <label class="text-xs md:text-sm">Delay Between Messages (milliseconds)</label>
            <input id="delayTime" type="number" class="p-2 rounded bg-gray-900 w-full focus:outline-none border border-gray-700" placeholder="Enter delay time in milliseconds (e.g., 1000)" value="5000" required>
        </div>
        
        <div class="flex flex-col gap-1 mb-4">
            <label class="text-xs md:text-sm">Recipient Numbers (comma-separated)</label>
            <textarea id="recipientNumbers" class="p-2 rounded bg-gray-900 w-full focus:outline-none border border-gray-700" placeholder="628xxxxxxxxxx, 628xxxxxxxxxx" required></textarea>
        </div>
        <div class="flex flex-col gap-1 mb-4">
            <label class="text-xs md:text-sm">Message Content</label>
            <textarea id="messageContent" rows="4" class="p-2 rounded bg-gray-900 w-full focus:outline-none border border-gray-700" placeholder="Enter your message.." required></textarea>
        </div>
        <div class="flex justify-between items-center mt-2">
            <p id="progressStatus" class="text-sm"></p>
            <button type="button" onclick="sendMassMessage()" class="flex items-center gap-2 bg-gray-700 hover:bg-blue-700 px-4 py-2 rounded">
                Send
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5" />
                </svg>
            </button>
        </div>
    
        <!-- List for displaying status -->
        <ul id="statusList" class="mt-4 text-sm"></ul>
    </div>

    <div id="successModal" class="hidden">
        <p id="modalMessage"></p>
    </div>


       
        <script>
             // Declare the function as async to allow 'await' usage
            function sleep(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }
        
            // Função para verificar se o número está registrado no WhatsApp
            async function checkWhatsAppNumber(number) {
                try {
                    const response = await fetch('/check-number', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ number }),
                    });
        
                    if (response.ok) {
                        const result = await response.json();
                        return result.isRegistered;
                    } else {
                        console.error(`Erro ao verificar número ${number}:`, response.statusText);
                        return false;
                    }
                } catch (error) {
                    console.error('Erro ao verificar número:', error);
                    return false;
                }
            }
        
            async function sendMassMessage() {
                const numbers = document.getElementById('recipientNumbers').value.split(',').map(num => num.trim());
                const message = document.getElementById('messageContent').value;
                const delayTime = parseInt(document.getElementById('delayTime').value, 10) || 0;
                const statusList = document.getElementById('statusList');
                const progressStatus = document.getElementById('progressStatus');
        
                if (numbers.length === 0 || !message) {
                    alert("Please provide recipient numbers and a message.");
                    return;
                }
        
                // Reset status display
                statusList.innerHTML = '';
                progressStatus.innerText = `Sending messages to ${numbers.length} contacts...`;
        
                let sentCount = 0;
        
                for (let number of numbers) {
                    const listItem = document.createElement('li');
                    listItem.innerText = `Checking WhatsApp registration for ${number}...`;
                    statusList.appendChild(listItem);
        
                    // Verificar se o número está registrado no WhatsApp
                    const isRegistered = await checkWhatsAppNumber(number);
        
                    if (!isRegistered) {
                        listItem.innerText = `Number ${number} is not registered on WhatsApp. Skipping...`;
                        continue;
                    }
        
                    listItem.innerText = `Sending to ${number}...`;
        
                    const payload = {
                        text: [
                            {
                                id: number,
                                messageText: message,
                            },
                        ],
                    };
        
                    try {
                        const response = await fetch('/send-message', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(payload),
                        });
        
                        if (response.ok) {
                            const result = await response.json();
                            listItem.innerText = `Message sent to ${number}: Success`;
                        } else {
                            listItem.innerText = `Message sent to ${number}: Failed`;
                        }
                    } catch (error) {
                        console.error('Error sending message:', error);
                        listItem.innerText = `Message sent to ${number}: Error`;
                    }
        
                    // Update progress
                    sentCount++;
                    progressStatus.innerText = `Sent ${sentCount} of ${numbers.length}`;
        
                    // Delay before sending the next message
                    if (sentCount < numbers.length) {
                        await sleep(delayTime);
                    }
                }
        
                progressStatus.innerText = 'All messages have been processed.';
            }
        </script>
        
</body>
</html>
